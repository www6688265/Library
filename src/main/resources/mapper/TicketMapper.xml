<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.work.dao.TicketMapper" >
  <resultMap id="BaseResultMap" type="cn.work.pojo.Ticket">
    <id column="TicketId" property="ticketid" jdbcType="INTEGER"/>
    <result column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="overdueTime" property="overduetime" jdbcType="INTEGER" />
    <result column="dealTime" property="dealtime" jdbcType="TIMESTAMP"/>
    <result column="fee" property="fee" jdbcType="DECIMAL"/>
    <result column="ticket_status" property="ticketStatus" jdbcType="INTEGER"/>
    <result column="bookid" property="bookid" jdbcType="INTEGER"/>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    TicketId, orderId, overdueTime, dealTime, fee, ticket_status, bookid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.work.pojo.TicketExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ticket
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ticket
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.work.pojo.TicketExample" >
    delete from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.work.pojo.Ticket" >
    insert into ticket (TicketId, orderId, overdueTime, 
      dealTime, fee, ticket_status, 
      bookid)
    values (#{ticketid,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, #{overduetime,jdbcType=INTEGER}, 
      #{dealtime,jdbcType=TIMESTAMP}, #{fee,jdbcType=DECIMAL}, #{ticketStatus,jdbcType=INTEGER}, 
      #{bookid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.work.pojo.Ticket" >
    insert into ticket
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ticketid != null" >
        TicketId,
      </if>
      <if test="orderid != null" >
        orderId,
      </if>
      <if test="overduetime != null" >
        overdueTime,
      </if>
      <if test="dealtime != null">
        dealTime,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="ticketStatus != null">
        ticket_status,
      </if>
      <if test="bookid != null">
        bookid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ticketid != null" >
        #{ticketid,jdbcType=INTEGER},
      </if>
      <if test="orderid != null" >
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="overduetime != null" >
        #{overduetime,jdbcType=INTEGER},
      </if>
      <if test="dealtime != null">
        #{dealtime,jdbcType=TIMESTAMP},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="ticketStatus != null">
        #{ticketStatus,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        #{bookid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.work.pojo.TicketExample" resultType="java.lang.Integer" >
    select count(*) from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ticket
    <set >
      <if test="record.ticketid != null" >
        TicketId = #{record.ticketid,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null" >
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.overduetime != null" >
        overdueTime = #{record.overduetime,jdbcType=INTEGER},
      </if>
      <if test="record.dealtime != null">
        dealTime = #{record.dealtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.fee != null" >
        fee = #{record.fee,jdbcType=DECIMAL},
      </if>
      <if test="record.ticketStatus != null">
        ticket_status = #{record.ticketStatus,jdbcType=INTEGER},
      </if>
      <if test="record.bookid != null">
        bookid = #{record.bookid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ticket
    set TicketId = #{record.ticketid,jdbcType=INTEGER},
      orderId = #{record.orderid,jdbcType=INTEGER},
      overdueTime = #{record.overduetime,jdbcType=INTEGER},
    dealTime = #{record.dealtime,jdbcType=TIMESTAMP},
    fee = #{record.fee,jdbcType=DECIMAL},
    ticket_status = #{record.ticketStatus,jdbcType=INTEGER},
    bookid = #{record.bookid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.work.pojo.Ticket" >
    update ticket
    <set >
      <if test="orderid != null" >
        orderId = #{orderid,jdbcType=INTEGER},
      </if>
      <if test="overduetime != null" >
        overdueTime = #{overduetime,jdbcType=INTEGER},
      </if>
      <if test="dealtime != null">
        dealTime = #{dealtime,jdbcType=TIMESTAMP},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="ticketStatus != null">
        ticket_status = #{ticketStatus,jdbcType=INTEGER},
      </if>
      <if test="bookid != null">
        bookid = #{bookid,jdbcType=INTEGER},
      </if>
    </set>
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.work.pojo.Ticket" >
    update ticket
    set orderId = #{orderid,jdbcType=INTEGER},
      overdueTime = #{overduetime,jdbcType=INTEGER},
      dealTime = #{dealtime,jdbcType=TIMESTAMP},
      fee = #{fee,jdbcType=DECIMAL},
      ticket_status = #{ticketStatus,jdbcType=INTEGER},
      bookid = #{bookid,jdbcType=INTEGER}
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </update>
  <!--自己的语句-->
  <resultMap id="TicketAndBorrowMap" type="cn.work.pojo.TicketExt">
    <id column="TicketId" property="ticketid"/>
    <result column="overduetime" property="overduetime"/>
    <result column="dealtime" property="dealtime"/>
    <result column="fee" property="fee"/>
    <result column="ticket_status" property="ticketStatus"/>
    <association property="borrowExt" javaType="cn.work.pojo.BorrowExt">
      <id column="borrow.orderId" property="orderid"></id>
      <result column="username" property="username"/>
      <result column="bookname" property="bookname"/>
      <result column="borrowtime" property="borrowtime"/>
      <result column="returntime" property="returntime"/>
      <result column="limittime" property="limittime"/>
    </association>
  </resultMap>
  <select id="getAllTicketRec" resultMap="TicketAndBorrowMap">
    SELECT
	ticket.TicketId,
	userinfo.username,
	book.bookname,
	BorrowedBooks.BorrowTime,
	BorrowedBooks.ReturnTime,
	BorrowedBooks.LimitTime,
	ticket.overdueTime,
	ticket.dealTime,
	ticket.fee,
	ticket.ticket_STATUS
FROM
    user,
	userinfo,
	borrow,
	ticket,
	book,
	BorrowedBooks
WHERE
	userinfo.userID = borrow.userID
	And borrow.orderId=BorrowedBooks.orderid
	AND book.bookID = BorrowedBooks.BookID
	AND ticket.orderId = borrow.orderId
	And ticket.orderId=BorrowedBooks.orderid
	And ticket.bookid=BorrowedBooks.bookid
	AND userinfo.userID=user.userID
  </select>
  <select id="countUserTicket" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT
	count( * )
FROM
	borrow,
	ticket
WHERE
	ticket.orderId = borrow.orderId AND ticket.ticket_status=0
	AND borrow.userid =#{id}
    </select>
  <select id="getUserFee" parameterType="java.lang.Integer" resultType="cn.work.pojo.Ticket">
        SELECT DISTINCT
	ticket.TicketId,
	ticket.fee
FROM
	ticket,
	borrow,
	BorrowedBooks,
	userinfo
WHERE
	ticket.ticket_status = 0
	AND borrow.orderId = BorrowedBooks.orderid
	AND ticket.orderId = Borrow.orderid
	AND ticket.orderId = BorrowedBooks.orderid
	AND borrow.userID = userInfo.userID
	AND userInfo.userID =#{id};
    </select>
  <update id="dealTicketByUserid" parameterType="java.lang.Integer">
        UPDATE ticket
INNER JOIN ( SELECT borrow.orderId, borrow.userID FROM borrow ) a
SET ticket_status = 1,`dealtime`=now()
WHERE
	ticket_status = 0
	AND a.orderid = ticket.orderid
	AND a.userid = #{id};
    </update>
  <select id="getTicketByUserId" parameterType="java.lang.Integer" resultMap="TicketAndBorrowMap">
    SELECT
	ticket.TicketId,
	userinfo.username,
	book.bookname,
	BorrowedBooks.BorrowTime,
	BorrowedBooks.ReturnTime,
	BorrowedBooks.LimitTime,
	ticket.overdueTime,
	ticket.dealTime,
	ticket.fee,
	ticket.ticket_STATUS
FROM
	user,
	userinfo,
	borrow,
	ticket,
	BorrowedBooks,
	book
WHERE
	userinfo.userID = borrow.userID
	And borrow.orderId=BorrowedBooks.orderid
	AND book.bookID = BorrowedBooks.BookID
	AND ticket.orderId = borrow.orderId
	And ticket.orderId=BorrowedBooks.orderid
	And ticket.bookid=BorrowedBooks.bookid
	AND userinfo.userID=user.userID
	AND user.userid=#{id}
    </select>
    <select id="getTicketRecs" parameterType="cn.work.pojo.dto.TicketQuery" resultMap="TicketAndBorrowMap">
        SELECT
        ticket.TicketId,
        userinfo.username,
        book.bookname,
        BorrowedBooks.BorrowTime,
        BorrowedBooks.ReturnTime,
        BorrowedBooks.LimitTime,
        ticket.overdueTime,
        ticket.dealTime,
        ticket.fee,
        ticket.ticket_STATUS
        FROM
        user,
        userinfo,
        borrow,
        ticket,
        book,
        BorrowedBooks
        <where>
            userinfo.userID = borrow.userID
            And borrow.orderId=BorrowedBooks.orderid
            AND book.bookID = BorrowedBooks.BookID
            AND ticket.orderId = borrow.orderId
            And ticket.orderId=BorrowedBooks.orderid
            And ticket.bookid=BorrowedBooks.bookid
            AND userinfo.userID=user.userID
            <if test="ticketid!=null and ticketid!=''">
                and ticket.TicketId=#{ticketid}
            </if>
            <if test="username!=null and username!=''">
                and userinfo.userName like CONCAT('%',#{username},'%')
            </if>
            <if test="bookname!=null and bookname!=''">
                and book.bookname like CONCAT('%',#{bookname},'%')
            </if>
            <if test="d_StartTime!=null">
                and Date(dealTime)>=DATE_FORMAT( #{d_StartTime}, '%Y-%m-%d')
            </if>
            <if test="d_EndTime!=null">
                and Date(dealTime)&lt;=DATE_FORMAT( #{d_EndTime}, '%Y-%m-%d')
            </if>
            <if test="r_StartTime!=null">
                and Date(ReturnTime)>=DATE_FORMAT( #{r_StartTime}, '%Y-%m-%d')
            </if>
            <if test="r_EndTime!=null">
                and Date(ReturnTime)&lt;=DATE_FORMAT( #{r_EndTime}, '%Y-%m-%d')
            </if>
            <if test="ticketStatus!=null">
                and ticket_status=#{ticketStatus}
            </if>
        </where>
    </select>
</mapper>