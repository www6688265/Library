<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.work.dao.BorrowMapper" >
  <resultMap id="BaseResultMap" type="cn.work.pojo.Borrow" >
    <id column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="userID" property="userid" jdbcType="INTEGER" />
    <result column="BookID" property="bookid" jdbcType="INTEGER" />
    <result column="BorrowTime" property="borrowtime" jdbcType="TIMESTAMP" />
    <result column="ReturnTime" property="returntime" jdbcType="TIMESTAMP" />
    <result column="LimitTime" property="limittime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    orderId, userID, BookID, BorrowTime, ReturnTime, LimitTime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.work.pojo.BorrowExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from borrow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from borrow
    where orderId = #{orderid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from borrow
    where orderId = #{orderid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.work.pojo.BorrowExample" >
    delete from borrow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.work.pojo.Borrow" >
    insert into borrow (orderId, userID, BookID, 
      BorrowTime, ReturnTime, LimitTime
      )
    values (#{orderid,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{bookid,jdbcType=INTEGER}, 
      #{borrowtime,jdbcType=TIMESTAMP}, #{returntime,jdbcType=TIMESTAMP}, #{limittime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.work.pojo.Borrow" >
    insert into borrow
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="orderid != null" >
        orderId,
      </if>
      <if test="userid != null" >
        userID,
      </if>
      <if test="bookid != null" >
        BookID,
      </if>
      <if test="borrowtime != null" >
        BorrowTime,
      </if>
      <if test="returntime != null" >
        ReturnTime,
      </if>
      <if test="limittime != null" >
        LimitTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="orderid != null" >
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null" >
        #{bookid,jdbcType=INTEGER},
      </if>
      <if test="borrowtime != null" >
        #{borrowtime,jdbcType=TIMESTAMP},
      </if>
      <if test="returntime != null" >
        #{returntime,jdbcType=TIMESTAMP},
      </if>
      <if test="limittime != null" >
        #{limittime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.work.pojo.BorrowExample" resultType="java.lang.Integer" >
    select count(*) from borrow
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update borrow
    <set >
      <if test="record.orderid != null" >
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userID = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.bookid != null" >
        BookID = #{record.bookid,jdbcType=INTEGER},
      </if>
      <if test="record.borrowtime != null" >
        BorrowTime = #{record.borrowtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.returntime != null" >
        ReturnTime = #{record.returntime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.limittime != null" >
        LimitTime = #{record.limittime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update borrow
    set orderId = #{record.orderid,jdbcType=INTEGER},
      userID = #{record.userid,jdbcType=INTEGER},
      BookID = #{record.bookid,jdbcType=INTEGER},
      BorrowTime = #{record.borrowtime,jdbcType=TIMESTAMP},
      ReturnTime = #{record.returntime,jdbcType=TIMESTAMP},
      LimitTime = #{record.limittime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.work.pojo.Borrow" >
    update borrow
    <set >
      <if test="userid != null" >
        userID = #{userid,jdbcType=INTEGER},
      </if>
      <if test="bookid != null" >
        BookID = #{bookid,jdbcType=INTEGER},
      </if>
      <if test="borrowtime != null" >
        BorrowTime = #{borrowtime,jdbcType=TIMESTAMP},
      </if>
      <if test="returntime != null" >
        ReturnTime = #{returntime,jdbcType=TIMESTAMP},
      </if>
      <if test="limittime != null" >
        LimitTime = #{limittime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where orderId = #{orderid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.work.pojo.Borrow" >
    update borrow
    set userID = #{userid,jdbcType=INTEGER},
      BookID = #{bookid,jdbcType=INTEGER},
      BorrowTime = #{borrowtime,jdbcType=TIMESTAMP},
      ReturnTime = #{returntime,jdbcType=TIMESTAMP},
      LimitTime = #{limittime,jdbcType=TIMESTAMP}
    where orderId = #{orderid,jdbcType=INTEGER}
  </update>
  <select id="getAllBorrowRec" resultType="cn.work.pojo.BorrowExt">
    SELECT
    userinfo.username,
	book.bookName,
	orderid,
	BorrowTime,
	ReturnTime,
	LimitTime
	FROM
	userinfo,
	book,
	borrow
	WHERE
	borrow.userid = userinfo.userID and
	borrow.BookID=book.bookID
  </select>
</mapper>