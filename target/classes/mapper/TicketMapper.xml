<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.work.dao.TicketMapper" >
  <resultMap id="BaseResultMap" type="cn.work.pojo.Ticket" >
    <id column="TicketId" property="ticketid" jdbcType="INTEGER" />
    <result column="orderId" property="orderid" jdbcType="INTEGER" />
    <result column="overdueTime" property="overduetime" jdbcType="INTEGER" />
    <result column="fee" property="fee" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    TicketId, orderId, overdueTime, fee, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.work.pojo.TicketExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ticket
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ticket
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.work.pojo.TicketExample" >
    delete from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.work.pojo.Ticket" >
    insert into ticket (TicketId, orderId, overdueTime, 
      fee, status)
    values (#{ticketid,jdbcType=INTEGER}, #{orderid,jdbcType=INTEGER}, #{overduetime,jdbcType=INTEGER}, 
      #{fee,jdbcType=DOUBLE}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.work.pojo.Ticket" >
    insert into ticket
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="ticketid != null" >
        TicketId,
      </if>
      <if test="orderid != null" >
        orderId,
      </if>
      <if test="overduetime != null" >
        overdueTime,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="ticketid != null" >
        #{ticketid,jdbcType=INTEGER},
      </if>
      <if test="orderid != null" >
        #{orderid,jdbcType=INTEGER},
      </if>
      <if test="overduetime != null" >
        #{overduetime,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DOUBLE},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.work.pojo.TicketExample" resultType="java.lang.Integer" >
    select count(*) from ticket
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update ticket
    <set >
      <if test="record.ticketid != null" >
        TicketId = #{record.ticketid,jdbcType=INTEGER},
      </if>
      <if test="record.orderid != null" >
        orderId = #{record.orderid,jdbcType=INTEGER},
      </if>
      <if test="record.overduetime != null" >
        overdueTime = #{record.overduetime,jdbcType=INTEGER},
      </if>
      <if test="record.fee != null" >
        fee = #{record.fee,jdbcType=DOUBLE},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update ticket
    set TicketId = #{record.ticketid,jdbcType=INTEGER},
      orderId = #{record.orderid,jdbcType=INTEGER},
      overdueTime = #{record.overduetime,jdbcType=INTEGER},
      fee = #{record.fee,jdbcType=DOUBLE},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.work.pojo.Ticket" >
    update ticket
    <set >
      <if test="orderid != null" >
        orderId = #{orderid,jdbcType=INTEGER},
      </if>
      <if test="overduetime != null" >
        overdueTime = #{overduetime,jdbcType=INTEGER},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=DOUBLE},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.work.pojo.Ticket" >
    update ticket
    set orderId = #{orderid,jdbcType=INTEGER},
      overdueTime = #{overduetime,jdbcType=INTEGER},
      fee = #{fee,jdbcType=DOUBLE},
      status = #{status,jdbcType=INTEGER}
    where TicketId = #{ticketid,jdbcType=INTEGER}
  </update>
    <!--自己的语句-->
    <resultMap id="TicketAndBorrowMap" type="cn.work.pojo.TicketExt">
        <id column="TicketId" property="ticketid"/>
        <result column="overduetime" property="overduetime"/>
        <result column="fee" property="fee"/>
        <result column="status" property="status"/>
        <association property="borrowExt" javaType="cn.work.pojo.BorrowExt">
            <id column="borrow.orderId" property="orderid"></id>
            <result column="username" property="username"/>
            <result column="bookname" property="bookname"/>
            <result column="borrowtime" property="borrowtime"/>
            <result column="returntime" property="returntime"/>
            <result column="limittime" property="limittime"/>
        </association>
    </resultMap>
  <select id="getAllTicketRec" resultMap="TicketAndBorrowMap">
      SELECT
	ticket.TicketId,
	userinfo.username,
	book.bookname,
	borrow.BorrowTime,
	borrow.ReturnTime,
	borrow.LimitTime,
	ticket.overdueTime,
	ticket.fee,
	ticket.STATUS
FROM
	userinfo,
	borrow,
	ticket,
	book
WHERE
	userinfo.userID = borrow.userID
	AND book.bookID = borrow.BookID
	AND ticket.orderId = borrow.orderId
  </select>
    <select id="countUserTicket" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        SELECT
	count( * )
FROM
	borrow,
	ticket
WHERE
	ticket.orderId = borrow.orderId AND ticket.`STATUS`=0
	AND borrow.userid =#{id}
    </select>
    <select id="getUserFee" parameterType="java.lang.Integer" resultType="java.lang.Double">
        SELECT
	ticket.fee
FROM
	ticket,
	borrow,
	userinfo
WHERE
	ticket.`status` = 0
	AND ticket.orderId = borrow.orderId
	AND borrow.userID = userInfo.userID
	AND userInfo.userID=#{id};
    </select>
    <update id="dealTicketByUserid" parameterType="java.lang.Integer">
        UPDATE ticket
INNER JOIN ( SELECT borrow.orderId, borrow.userID FROM borrow ) a
SET `status` = 1
WHERE
	`status` = 0
	AND a.orderid = ticket.orderid
	AND a.userid = #{id};
    </update>
    <select id="getTicketByUserId" parameterType="java.lang.Integer" resultMap="TicketAndBorrowMap">
    SELECT
	ticket.TicketId,
	userinfo.username,
	book.bookname,
	borrow.BorrowTime,
	borrow.ReturnTime,
	borrow.LimitTime,
	ticket.overdueTime,
	ticket.fee,
	ticket.STATUS
FROM
	user,
	userinfo,
	borrow,
	ticket,
	book
WHERE
	userinfo.userID = borrow.userID
	AND book.bookID = borrow.BookID
	AND ticket.orderId = borrow.orderId
	AND userinfo.userID=user.userID
	AND user.userid=#{id}
    </select>
</mapper>